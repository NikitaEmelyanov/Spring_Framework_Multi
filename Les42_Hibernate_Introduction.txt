
___________________________Классы похожи на таблицы в реляционных БД___________________________________
|                       Java                         |                Реляционные БД                  |
|----------------------------------------------------|------------------------------------------------|
|                  Название класса                   |               Название таблицы                 |
|                   Объект класса                    |                Строка таблицы                  |
|            Список объектов (List<Person>)          |                   Таблица                      |
|                   Поле в классе                    |               Столбец в таблице                |
-------------------------------------------------------------------------------------------------------

____________________________ORM ((Object-Relational Mapping) Hibernate)________________________________

   person1
   id: 1
   name: Tom \                                id  | name
              \                              -----|------
   person2     \                               1  | Tom
   id: 2    --->    ORM (Hibernate)    --->    2  | Bob
   name: Bob   /     Автоматически             3  | Tim
              /            \                  (3 rows)
   person3   /              \
   id: 3            Но под капотом у него     Талица Person в БД
   name: Tim          тот же JDBC API.
                    Hibernate - надстройка
  Java объекты

  ________________________________ORM. Связи между сущностями_________________________________________

         Person                                                       Order
------------------------                                ----------------------------------
| user_id | name | age |                                | order_id | user_id | item_name |
|---------|------|-----|                                |----------|---------|-----------|
|    1    | Tom  | 35  |                                |    1     |    1    |   Book    |
|    2    | Bob  | 52  |             БД                 |    2     |    1    |  Airpods  |
|    3    | Katy | 14  |                                |    3     |    2    |  iPhone   |
------------------------                                |    4     |    3    |  Kindle   |
            |                                           ----------------------------------
            |                                                           |
            |                                                           |
public class Person {                                             public class Order {
    private int id;                                                  private int id;
    private String name;                  Java                       private String itemName;
    private int age;                                                 private Person person;
    private List<Order> orders;                                   }
}

_____________________________Hibernate. ORM библиотека для Java_______________________________________

SessionFactory sessionFactory = configuration.buildSessionFactory();

Session session = sessionFactory.getCurrentSession();
Person person = new Person(id:1, name:"Test");

try{
session.beginTransaction();
session.save(person);
session.getTransaction().commit();

} finally {
    sessionFactory.close();
}

Пример кода для сохранения объекта в таблице в реляционной БД без SQL

________________________________________Сессия (Session)______________________________________________

SessionFactory sessionFactory = configuration.buildSessionFactory();
Session session = sessionFactory.getCurrentSession();

Объект для взаимодействия с Hibernate. Когда хотим что - то делать с БД через Hibernate - получаем
сессию. Объект Session получаем из объекта SessionFactory (паттерн Фабрика)

На Объекте Session можно вызвать:
1) save
2) update
3) get
4) ...

________________________________Транзакция. Единица работы с БД_______________________________________

session.beginTransaction();             Начали транзакцию
session.save(person);                   *Работа с БД*
session.getTransaction().commit();      Завершили транзакцию

1) Нужны для поддержания согласованности данных в таблице
2) Транзакции могут блокировать доступ к БД (примеры: пока я пишу в таблицу не читай значения из нее,
   пока я обновляю человека его нельзя обновить, пока я удаляю строки в таблице нельзя получить все
   строки из таблицы )
3) Транзакции можно применять (COMMIT) и откатывать (ROLLBACK).

___________________________________Транзакция на примере______________________________________________

  -------------
  |  |  |  |  |       Сессия №2
  |  |  |  |  |       <--------   Обновляю значение ЗП для 1.000.000 людей (строк).
  |  |  |  |  |                    Увеличиваю ее на 150к.
  -------------
       |
       | Сессия №1                 Стандартная проблема состояния гонки
       |                           (Race condition). Несколько потоков
 Обновляю значение                 изменит один и тот же объект -
  ЗП для 1.000.000                 необходимо синхронизировать потоки
   людей (строк).                  (обычно с помощью блокировок).
Увеличиваю ее на 100.                             |
                                                  |
                            Транзакции с разными уровнями изоляции (Transactional Isolation Levels)